-- Eklavya Sood's xmonad config --

import XMonad
import System.Directory
import System.IO (hPutStrLn)
import System.Exit (exitSuccess)
import qualified XMonad.StackSet as W
import XMonad.Config.Desktop


-- actions
import XMonad.Actions.CopyWindow (kill1)
import XMonad.Actions.CycleWS (Direction1D(..), moveTo, shiftTo, WSType(..), nextScreen, prevScreen)
import XMonad.Actions.GridSelect
import XMonad.Actions.MouseResize
import XMonad.Actions.Promote
import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)
import XMonad.Actions.WindowGo (runOrRaise)
import XMonad.Actions.WithAll (sinkAll, killAll)
import qualified XMonad.Actions.Search as S
-- --


-- data --
import Data.Char (isSpace, toUpper)
import Data.Maybe (fromJust)
import Data.Monoid
import Data.Maybe (isJust)
import Data.Tree
import qualified Data.Map as M


-- hooks --
import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobadPP, xmobadColor, shorten, PP(..))
import XMonad.Hooks.EwmhDesktops--for fullscreen events
import XMonad.Hooks.ManageDocks (avoidStruts, docksEvedntHook, manageDocks, ToggleStruts(..))
import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat, doCenterFloat)
import XMonad.Hooks.ServerMode
import XMonad.Hooks.SetWMName
import XMonad.Hooks.WorkspaceHistory


-- layouts --
import XMonad.Layout.Accordion
import XMonad.Layout.GridVariants (Grid(Grid))
import XMonad.Layout.SimplestFloat
import XMonad.Layout.Spiral
import XMonad.Layout.ResizableTile
import XMonad.Layout.Tabbed
import XMonad.Layout.ThreeColumns
-- --


-- layout modifiers --
import XMonad.Layout.LayoutModifier
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.Magnifier
import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.ShowWName
import XMonad.Layout.Simplest
import XMonad.Layout.Spacing
import XMonad.Layout.SubLayouts
import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
import XMonad.Layout.WindowNavigation
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayout, ToggleLayout(Toggle))
import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))
-- --

-- utilities --
import XMonad.Util.Dmenu
import XMonad.Util.EZConfig (additionalKeysP)
import XMonad.Util.NamedScratchpad
import XMonad.Util.Run (runProcessWithInput, safeSpawn, spawnPipe)
import XMonad.Util.SpawnOnce
-- --


-- variables --
myModMask :: KeyMask
myModMask = mod4mask -- set super to modkey

myFont :: String
myFont = "Tamsyn:pixelsize=9;1"

myTerminal :: String
myTerminal = "alacritty"-- set default term to alacritty

myBrowser :: String
myBrowser = "vivaldi"-- set default browser to vivaldi

myEditor :: String
myEditor = myTerminal ++ " -e nvim"-- set default editor to neovim

myBorderWidth :: Dimension
myBorderWidth = 2-- window border width

myNormColor :: String
myNormColor - "#282c34"-- normal window border color

myFocusColor :: String
myFocusColor = "46d9ff"
-- --


windowCount :: X (maybe String)
windowCount - gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset


-- statup services --
myStartupHook :: X ()
myStartupHook = do
spawnOnce "picom &"
spawnOnce "nm-applet &"
spawnOnce "nitrogen --restore &"
spawnOnce "ckb-next -background"
spawnOnce "pulseeffects --gapplication-service"
setWMName "LG3D"
-- --


-- layouts --
--mySpacing :: Integer -> l a -> XMonad.Layout.Modifier.ModifiedLayout Spacing l a
--mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True--window gaps

tall = renamed [Replace "tall"]
$ smartBorders
$ windowNavigation
$ addTabs shrinkText myTabTheme
$ subLayout [] (smaartBorders Simplest)
$ limitWindows 12
$ mySpacing 8
$ ResizeTall 1 (3/100) (1/2) []
	
magnify = renamed [Replace "magnify"]
$ smartBorders
$ windowNavigation
$ addTabs shrinkText myTabTheme
$ subLayout [] (smartBorders Simplest)
$ magnifier
$ limitWindows 12
$ mySpacing 8
$ ResizableTall 1 (3/100) (1/2) []

monocle = renamed [Replace "monocle"]
$ smartBorders
$ windowNavigation
$ addTabs shrinkText myTabTheme
$ sublayout [] (smartBorders Simplest)
$ limitWindows 20 Full

floats = renamed [Replace "floats"]
$ smartBorders
$ limitWindows20 simplestFloat

grid = renamed [Replace "grid"]
$ smartBorders
$ windowNavigation
$ addTabs shrinkText myTabTheme
$ subLayout [] (smartBorders Simplest)
$ limitWindows 12
$ mySpacing 8
$ mkToggle (single MIRROR)
$ Grid (16/10)

spirals = renamed [Replace "spirals"]
$ smartBorders
$ windowNavigation
$ addTabs shrinkText myTabTheme
$ subLayout [] (smartBorders Simplest)
$ mySpacing' 8
$ spiral (6/7)
		 
threeCol = renamed [Replace "threeCol"]
$ smartBorders
$ windowNavigation
$ addTabs shrinkText myTabTheme
$ subLayout [] (smartBorders Simplest)
$ mySpacing 8
$ limitWindows 7
$ ThreeCol 1 (3/100) (1/2)

threeRow = renamed [Replace "threeRow"]
$ smartBorders
$ windowNavigation
$ addTabs shrinkText myTabTheme
$ subLayout [] (smartBorders Simplest)
$ limitWindows 7
$ Mirror
$ ThreeCol 1 (3/100) (1/2)

tabs = Renamed [Replace "tabs"]
$ tabbed shrinkText myTabTheme

tallAccordion = Renamed [Replaced "tallAccordion"]
$ Accordion

wideAccordion = Renamed [Replace "wideAccordion"]
$ Mirror Accordion

myTabTheme = def {fontName= myFont
		, activeColor= "#46d9ff"
		, inactiveColor= "#313846"
		, activeBorderColor= "#46d9ff"
		, inactiveBorderColor= "#282c34"
		, activeTextColor= "#282c34"
		, inactiveTextColor= "#d0d0d0"

myShowWNameTheme :: SWNConfig
myShowWNameTheme = def
{
 swn_font= "Tamsyn:pixelsize=9;1"
,swn_fade= 1.0
,swn_bgcolor= "#1c1f24"
,swn_color= "#ffffff"
}
-- --


-- layout hoot --
myLayoutHook = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts floats $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout
where
myDefaultLayout = withBorder myBorderWidth tall
||| magnify
||| noBorders monocle
||| floats
||| noBorders tabs
||| grid
||| spirals
||| threeCol
||| threeRow
||| tallAccordion
||| wideAccordion
-- --


-- workspaces --
myWorkspaces = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
myWorkspaceIndicces = M.fromList $ zipWith (,) myWorkspaces [1..] -- (,) == \x y -> (x,y)

clickable ws = "<action=xdotool key super+"++show i++">"++ws++"</action>"
	where i = fromJust $ M.lookup ws myWorkspaceIndices
-- --


-- managehooks --
-- these rules make some windows always float, or some windows to go to a particular workspace everytime 
myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
myManageHook = composeAll
[	className =? "confirm"			--> doFloat
      , className =? "file_progress"		--> doFloat
      , className =? "dialog" 			--> doFloat
      , className =? "download"			--> doFloat
      , classname =? "error" 			--> doFloat
      , classname =? "notification"		--> doFloat
      , classname =? "splash"			--> doFloat
      , classname =? "toolbar"			--> doFloat
      , classname =? "Vivaldi-stable"		--> doShift ( myWorkspace !! 1 )
      , classname =? "Spotify"			--> doShift ( myWorkspace !! 8 )
      , isFullscreen --> doFullFloat
      ]
--


-- keybindings --
-- using XMonad.util.EZConfig so these bindings can be written in an easier format
myKeys :: [(String, X ())]
myKeys = 
[ ("M-C-r", spawn "xmonad --recompile")-- recompile xmonad
, ("M-S-r", spawn "xmonad --restart")-- restart xmonad
, ("M-S-q", io exitSuccess)-- quit xmonad

, ("M-<Space>", spawn "dmenu_run -b"-- dmenu run prompt

, ("M-<Return>", spawn (myTerminal))-- launch terminal

, ("M-w", kill1)-- kill focus window
, ("M-M4-w", killAll)-- kill everything in workspace
	
, ("M-f", sendMessage (T.Toggle "floats"))-- toggle floats layout
, ("M-t", withFocused $ windows . W.sink)-- send back to tiled mode
, ("M-S-t", sinkAll)-- send everything back to tiled

, ("C-M1-j", decWindowSpacing 4)-- less window gaps
, ("C-M1-k", incWindowSpacing 4)-- more window gaps
, ("C-M1-h", decScreenSpacing 4)-- less screen gaps
, ("C-M1-l", incScreenSpacing 4)-- more screen gaps

, ("M-m", windows W.focusMaster)-- focus master window
, ("M-j", windows W.focusDown)-- focus next window
, ("M-k", windows W.focusUp)-- focus prev window
, ("M-S-m", windows W.swapMaster)-- swap master and focused window
, ("M-S-j", windows W.swapDown)-- swap to next window
, ("M-S-k", windows W.swapUp)-- swap to prev window
, ("M-<Backspace>", promote)-- swap focused with master, everything else stays in place
, ("M-S-<Tab>", rotSlavesDown)-- rotate all windows except master
, ("M-C-<Tab>", rotAllDown)-- rotate everything

-- layouts
, ("M-<Tab>", sendMessage NextLayout)-- next layout
, ("M-C-<Space>", sendMessage (MT.Toggle NBFULL) >> sendMessage ToggleStruts)-- toggle noborder/full

--inc/dec windows in master or stack
, ("M-S-<Up>", sendMessage (IncMasterN (1)))-- inc # of clients in master pane
, ("M-S-<Down>", sendMessage (IncMasterN (-1)))-- dec # of clients in master pane
, ("M-C-<Up>", increaseLimit)-- inc # of windows
, ("M-C-<Down>", decreaseLimit)-- dec # of windows

-- resizing
, ("M-h", sendMessage Shrink)-- shrink horiz window width
, ("M-l", sendMessage Expand)-- expand horiz window width
, ("M-M1-j", sendMessage MirrorShrink)-- shrink vert window width
, ("M-M1-k", sendMessage MirrorExpand)-- expand vert window width

-- media controls
, ("XF86AudioPlay", spawn "playerctl play-pause")-- play
, ("XF86AudioPause", spawn "playerctl play-pause")-- pause
, ("XF86AudioNext", spawn "playerctl next")-- next
, ("XF86AudioPrev", spawn "playerctl previous")-- prev
, ("XF86AudioStop", spawn "playertl stop")-- stop
, ("XF86AudioRaiseVolume", spawn "pactl set-sink-volume @DEFAULT_SINK@ +5%")
, ("XF86AudioLowerVolume", spawn "pactl set-sink-volume @DEFAULT_SINK@ -5%")
, ("XF86AudioMute", spawn "pactl set-sink-mute @DEFAULT_SINK@ toggle")


-- screenshot binding
, ("<Print>", spawn "flameshot gui")
-- --


-- main of xmonad, where everything comes together
main :: IO ()
main = do
xmproc0 <- spawnPipe "xmobar -x 0 $HOME/.config/xmobar/xmobarrc"
xmonad $ ewmh def
{
  manageHook		= myManageHook <+> manageDocks
, handleEventHook	= docksEventHook
, modMask		= myModMask
, terminal		= myTerminal
, startupHook		= myStartupHook
, layoutHook 		= showWName' myShowWNameTheme $ myLayoutHook
, workspaces		= myWorkspaces
, borderWidth		= myBorderWidth
, normalBorderColor	= myNormColor
, focusedBorderColor	= myFocusColor

, logHook = workspaceHistoryHook <+> myLogHook <+> dynamicLogWithPP xmobarPP
{   ppOutput = \x -> hPutStrLn xmproc0 x
  , ppCurrent = xmobarColor "#c3r88d" "" . wrap "[" "]"
  , ppVisible = xmobarColor "#c3r88d" ""
  , ppHidden = xmobarColor "#82AAFF" "" . wrap "*" ""
  , ppHiddenNoWindows = xmobarColor "#F07178" ""
  , ppTitle = xmobarColor "#d0d0d0" "" . shorten 60
  , ppSep = "<fc=#666666> | </fc>"
  , ppUrgent = xmobarColor "#C45500" "" . wrap "!" "!"
  , ppExtras = [windowCount]
  , ppOrder = \(ws:l:t:ex) -> [ws,l]++ex++[t]
}
} 'additionalKeysP' myKeys
